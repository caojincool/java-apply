------------linux系统启动顺序--------

1: 启动电源后，主机第一步先做的就是查询BIOS(全称:basic input/output system 基本输入输出系统)信息。
   了解整个系统的硬件状态，如CPU，内存，显卡，网卡等。

2: 主机读取MBR(硬盘的第一个扇区)里的boot loader引导加载程序了。
   Boot Loader(那就是lilo或者grub) 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，
   从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备
   Linux的引导扇区内容是采用汇编语言编写的程序，其源代码在arch/i386/boot中

3: 主机读取boot loader后，会读取里面的信息，知道谁跟谁是待在哪，假如主机想进入linux系统，读取到linux核心是在/boot文件目录中后，
   将此核心加载到内存中。开始了接下来的分析启动之旅。

4: 运行第一个程序/sbin/init程序。此程序会读取/etc/inittab文件，并依据此文件来进行初始化工作。

5: init首先查找启动等级(run-level)。因为启动等级不同，其运行脚本(也就是服务)会不同。
   0 - halt (系统直接关机)
　 1 - single user mode (单人模式，用于系统维护时使用)
　 2 - Multi-user， without NFS (类似3模式，不过少了NFS服务)
　 3 - Full multi-user mode (完整模式，不过，是文本模式)
　 4 - unused (系统保留功能)
　 5 - X11 (与3模式类似，不过，是X终端显示)
　 6 - reboot (重新开机)
　 (不要选择0或4，6 否则，进步了系统的)
   runlevel-----查询当前系统运行级别
   init 2  -----临时切换运行级别到2
   startx  -----直接进入init5 图形模式

6: 系统知道自己的启动等级后，接下来，不是去启动服务，而是，先设置好主机运行环境。读取的文件是/etc/rc.d/rc.sysinit文件。依次执行:
   设置网络环境/etc/sysconfig/network，如主机名，网关，IP，DNS等。
   挂载/proc。此文件是个特殊文件，大小为0，因为它是在内存当中。里面东东最好别删。
   根据内核在开机时的结果/proc/sys/kernel/modprobe。开始进行周边设备的侦测。
   载入用户自定义的模块/etc/sysconfig/modules/*.modules
   读取/etc/sysctl.conf文件对内核进行设定。
   设定时间，终端字体，硬盘LVM或RAID功能，以fsck进行磁盘检测。
   将开机状况记录到/var/log/dmesg中。(可以用命令dmesg查看结果)

7: 启动内核模块，具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。

8: 接下来，就是启动系统服务了，不同的run-level会有不同的服务启动。到/etc/rc.d目录中，不同的level会有不同的目录。
   如启动3模式，会有个rc3.d目录，里面就保存着服务。其中，S(start)开头的表明开机启动，K(kill)开头的表明开机不启动。数字表示启动顺序。数字越小，启动越早。

9: 读取服务后，主机会读取/etc/rc.d/rc.local文件。所以，如果需要什么开机启动的话，可以写个脚本或命令到这里面来。就不用像上面那么麻烦。以后删除也方便。
   
10: 执行/bin/login程序，进入登录状态，此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。
    /etc/securetty中登记了的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录。
    /etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。

11: 进入 login shell,所谓shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell
    Login程序成功后，会向对应的终端再输出最近一次登录的信息（在/var/log/lostlog中有记录），需要使用lastlog命令查看。
    并检查用户是否有新邮件（在/usr/spool/mail的对应用户名目录下）
    命令行,ssh登陆,首先读入 /etc/profile，这是对所有用户都有效的配置；
    然后依次寻找~/.bash_profile,~/.bash_login,~/.profile三个文件，这是针对当前用户的配置。需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了
    图形界面登录只加载 /etc/profile 和 ~/.profile

12: 打开 non-login shell,老实说，上一步完成以后，Linux的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。
    但是，用户进入操作系统以后，常常会再手动开启一个shell。这个shell就叫做 non-login shell，
    意思是它不同于登录时出现的那个shell，不读取/etc/profile和~/.profile等配置文件。
    non-login shell的重要性，不仅在于它是用户最常接触的那个shell，还在于它会读入用户自己的bash配置文件~/.bashrc。
    大多数时候，我们对于bash的定制，都是写在这个文件里面的
    bash的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash的作者只好把配置文件分成了几个部分，阶段性载入。
    系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在~/.profile，不需要被继承的设置放在~/.bashrc。

------------ntsysv详解---------------

tsysv用于直观方便的设置各个服务是否自动启动，它具有互动式操作界面，用户可以轻易地利用方向键和空格键等，开启，关闭操作系统在每个执行等级中，设置系统的各种服务。

------------source详解----------------

source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令。
当我修改了/etc/profile文件，我想让它立刻生效，而不用重新登录；这时就想到用source命令，如:source /etc/profile

功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句
source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。

用法：source filename 或 . filename

source filename 与 sh filename 及./filename执行脚本的区别在那里呢？
1.当shell脚本具有可执行权限时，用sh filename与./filename执行脚本是没有区别得。./filename是因为当前目录没有在PATH中，所有"."是用来表示当前目录的。
2.sh filename 重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell，除非使用export。
3.source filename：这个命令其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。-

举例说明：
1.新建一个test.sh脚本，内容为:A=1
2.然后使其可执行chmod +x test.sh
3.运行sh test.sh后，echo $A，显示为空，因为A=1并未传回给当前shell
4.运行./test.sh后，也是一样的效果
5.运行source test.sh 或者 . test.sh，然后echo $A，则会显示1，说明A=1的变量在当前shell中

---------------------------------------