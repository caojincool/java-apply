<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" id="sixapart-standard">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>	
<h1 id="page-title" class="asset-name entry-title">git操作详解</h1>
<div class="asset-content entry-content" id="main-content">
<p>git是目前最流行的版本管理系统，学会git几乎成了开发者的必备技能。</p>
<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>

<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>

<h2>一、git clone</h2>

<p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone <span class="token operator">&lt;</span>版本库的网址<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>比如，克隆jQuery的版本库。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>git
</code></pre></blockquote>

<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone <span class="token operator">&lt;</span>版本库的网址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地目录名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone http<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
$ git clone ssh<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
$ git clone git<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
$ git clone <span class="token operator">/</span>opt<span class="token operator">/</span>git<span class="token operator">/</span>project<span class="token punctuation">.</span>git 
$ git clone file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///opt/git/project.git
</span>$ git clone ftp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
$ git clone rsync<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
</code></pre></blockquote>

<p>SSH协议还有另一种写法。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone <span class="token punctuation">[</span>user@<span class="token punctuation">]</span>example<span class="token punctuation">.</span>com<span class="token punctuation">:</span>path<span class="token operator">/</span>to<span class="token regex">/repo.git/</span>
</code></pre></blockquote>

<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a target="_blank" href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols">官方文档</a>。</p>

<h2>二、git remote</h2>

<p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>

<p>不带选项的时候，git remote命令列出所有远程主机。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote
origin
</code></pre></blockquote>

<p>使用-v选项，可以参看远程主机的网址。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote <span class="token operator">-</span>v
origin  <a class="token email-link" href="mailto:git@github">git@github</a><span class="token punctuation">.</span>com<span class="token punctuation">:</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin  <a class="token email-link" href="mailto:git@github">git@github</a><span class="token punctuation">.</span>com<span class="token punctuation">:</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
</code></pre></blockquote>

<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>

<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git clone <span class="token operator">-</span>o jQuery https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>jquery<span class="token operator">/</span>jquery<span class="token punctuation">.</span>git
$ git remote
jQuery
</code></pre></blockquote>

<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>

<p>git remote show命令加上主机名，可以查看该主机的详细信息。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote show <span class="token operator">&lt;</span>主机名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>git remote add命令用于添加远程主机。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote add <span class="token operator">&lt;</span>主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>网址<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>git remote rm命令用于删除远程主机。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote rm <span class="token operator">&lt;</span>主机名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>git remote rename命令用于远程主机的改名。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git remote rename <span class="token operator">&lt;</span>原主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>新主机名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<h2>三、git fetch</h2>

<p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>上面命令将某个远程主机的更新，全部取回本地。</p>

<p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>比如，取回origin主机的master分支。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git fetch origin master
</code></pre></blockquote>

<p>所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。</p>

<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git branch <span class="token operator">-</span>r
origin<span class="token operator">/</span>master

$ git branch <span class="token operator">-</span>a
<span class="token operator">*</span> master
  remotes<span class="token operator">/</span>origin<span class="token operator">/</span>master
</code></pre></blockquote>

<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>

<p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git checkout <span class="token operator">-</span>b newBrach origin<span class="token operator">/</span>master
</code></pre></blockquote>

<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>

<p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git merge origin<span class="token operator">/</span>master
# 或者
$ git rebase origin<span class="token operator">/</span>master
</code></pre></blockquote>

<p>上面命令表示在当前分支上，合并origin/master。</p>

<h2>四、git pull</h2>

<p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull origin next<span class="token punctuation">:</span>master
</code></pre></blockquote>

<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull origin next
</code></pre></blockquote>

<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git fetch origin
$ git merge origin<span class="token operator">/</span>next
</code></pre></blockquote>

<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。</p>

<p>Git也允许手动建立追踪关系。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
git branch <span class="token operator">--</span>set<span class="token operator">-</span>upstream master origin<span class="token operator">/</span>next
</code></pre></blockquote>

<p>上面命令指定master分支追踪origin/next分支。</p>

<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull origin
</code></pre></blockquote>

<p>上面命令表示，本地的当前分支自动与对应的origin主机"追踪分支"（remote-tracking branch）进行合并。</p>

<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull
</code></pre></blockquote>

<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>

<p>如果合并需要采用rebase模式，可以使用--rebase选项。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git pull <span class="token operator">--</span>rebase <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<h2>五、git push</h2>

<p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>
</code></pre></blockquote>

<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>

<p>如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push origin master
</code></pre></blockquote>

<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>

<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push origin <span class="token punctuation">:</span>master
# 等同于
$ git push origin <span class="token operator">--</span>delete master
</code></pre></blockquote>

<p>上面命令表示删除origin主机的master分支。</p>

<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push origin
</code></pre></blockquote>

<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>

<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push
</code></pre></blockquote>

<p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push <span class="token operator">-</span>u origin master
</code></pre></blockquote>

<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>

<p>不带任何参数的git 
push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 
2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git config <span class="token operator">--</span>global push<span class="token punctuation">.</span>default matching
# 或者
$ git config <span class="token operator">--</span>global push<span class="token punctuation">.</span>default simple
</code></pre></blockquote>

<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push <span class="token operator">--</span>all origin
</code></pre></blockquote>

<p>上面命令表示，将所有本地分支都推送到origin主机。</p>

<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push <span class="token operator">--</span>force origin 
</code></pre></blockquote>

<p>上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。</p>

<p>最后，git push不会推送标签（tag），除非使用--tags选项。</p>

<blockquote><pre class="  language-javascript"><code class="  language-javascript">
$ git push origin <span class="token operator">--</span>tags
</code></pre></blockquote>

</div>
</body>
</html>