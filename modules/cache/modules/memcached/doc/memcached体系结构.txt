----------------------------memcached体系结构---------------------------------
memcached是高性能的分布式内存缓存服务器。一般使用目的是通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度。
memcached特点:
协议简单
　　memcached的服务器客户端通信并不使用复杂的XML等格式，而使用简单的基于文本行的协议。因此,通过telnet也能在memcached上保存数据、取得数据。
    1.3后的版本支持二进制协议，现在的memcached规格中，键长度最大为250字节，但二进制协议中键的大小是用2字节表示。因此，理论上最大可使用65536字节长的键。
基于libevent的事件处理
    libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能封装成统一的接口。即使对服务器的连接数增加，也能发挥O(1)的性能。
    memcached使用这个libevent库，因此能在Linux、BSD、Solaris等操作系统上发挥其高性能。
内置内存存储方式
　　为了提高性能，memcached中保存的数据都存储在memcached内置的内存存储空间中。由于数据仅存在于内存中，因此重启memcached、重启操作系统会导致全部数据消失。
　　另外，内容容量达到指定值之后，就基于LRU(Least Recently Used)算法自动删除不使用的缓存。
memcached不互相通信的分布式
　　memcached尽管是“分布式”缓存服务器，但服务器端并没有分布式功能。各个memcached不会互相通信以共享信息。
    至于memcached的分布式，则是完全由客户端程序库实现的。比如客户端根据服务端数量的余数进行分散。以存储键的整数哈希值除以服务端台数，根据其余数来选择服务端。
-------------------------------------
memcached的存储机制
memcached默认情况下采用了名为Slab Allocator的机制分配、管理内存。
内存的分配是通过对所有记录简单地进行malloc和free来进行的。 但是，这种方式会导致内存碎片，加重操作系统内存管理器的负担，
最坏的情况下， 会导致操作系统比memcached进程本身还慢。Slab Allocator就是为解决该问题而诞生的。
Slab Allocator的基本原理是按照预先规定的大小,将分配的内存分割成各种尺寸的块(chunk),并把尺寸相同的块分成组(chunk的集合),以解决内存碎片问题。
memcached根据收到的数据的大小，选择最适合数据大小的slab class。 memcached中保存着slab class内空闲chunk的列表，根据该列表选择chunk，然后将数据缓存于其中。
Slab Allocator解决了当初的内存碎片问题，但也给memcached带来了新的问题。由于分配的是特定长度的内存，因此无法有效利用分配的内存。
例如，将100字节的数据缓存到128字节的chunk中，剩余的28字节就浪费了。通过使用Growth Factor进行调优可以调节slab class的大小的差别。
memcached在启动时指定 Growth Factor因子（通过-f选项）， 就可以在某种程度上控制slab之间的差异。默认值为1.25。

memcached启动时指定的内存分配量是memcached用于保存数据的量，没有包括“slab allocator”本身占用的内存、以及为了保存数据而设置的管理空间。
因此，memcached进程的实际内存分配量要比指定的容量要大。

chunk:用于缓存记录的内存空间
slab Class:特定大小的chunk的组
-------------------------------------
memcached的数据删除机制
memcached不会释放已分配的内存。记录超时后，客户端就无法再看见该记录（透明）,其存储空间即可重复使用。
Lazy Expiration:memcached内部不会监视记录是否过期，而是在get时查看记录的时间戳，检查记录是否过期。
                这种技术被称为lazy（惰性）expiration。因此，memcached不会在过期监视上耗费CPU时间。
LRU:memcached会优先使用已超时的记录的空间，但即使如此，也会发生追加新记录时空间不足的情况，此时就要使用名为 Least Recently Used（LRU）机制来分配空间。
    当memcached的内存空间不足时（无法从slab class 获取到新的空间时），就从最近未被使用的记录中搜索，并将其空间分配给新的记录。
    从缓存的实用角度来看，该模型十分理想。不过，有些情况下LRU机制反倒会造成麻烦。memcached启动时通过“-M”参数可以禁止LRU。
-------------------------------------------------------------------------------