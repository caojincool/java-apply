------------------------------------------------------------------
搭建Redis集群需要一些运行在集群模式的Redis实例. 这意味着集群并不是由一些普通的Redis实例组成的，集群模式需要通过配置启用，
开启集群模式后的Redis实例便可以使用集群特有的命令和特性了
集群正常运作至少需要三个主节点，建议使用六个节点:其中三个为主节点，另三个则是各个主节点的从节点。

redis集群安装:
    1,各节点安装redis实例(3台服务器,每台服务器部2个节点)
        wget http://download.redis.io/releases/redis-3.2.0.tar.gz
        tar -zxvf redis-3.2.0.tar.gz                          #解压
        cd redis-3.2.0
        make                                                  #编译
        make install  PREFIX=/usr/local/redis-cluster
        cp redis.conf /usr/local/redis-cluster/bin            #将配置文件redis.conf复制到部署目录下
        cp src/redis-trib.rb /usr/local/redis-cluster/bin     #将src下的redis-trib.rb复制到部署目录下
                                                               redis-trib.rb文件是redis集群的管理文件
        cd /usr/local/redis-cluster
        mv bin redis01                                        #改redis的目录名，复制redis01为redis02...redis06，可以在不同的服务器间复制
    各redis实例的配置(redis.conf):
        daemonize yes                           ###后台启动
        port 7001                               ###端口号从7001-7006
        cluster-enabled yes                     ###开启集群模式
        cluster-config-file nodes.conf          ###节点配置文件的路径
        cluster-node-timeout 5000
        appendonly yes
        bind 0.0.0.0
        pidfile redis.pid
        appendfilename "appendonly.aof"
        appendfsync everysec
    2,各节点安装ruby环境
        yum install ruby
        yum install rubygems
        wget https://rubygems.global.ssl.fastly.net/gems/redis-3.2.2.gem
        gem install redis-3.2.2.gem             ###安装ruby和redis的接口程序
    3,启动各节点redis服务
        cd /usr/local/redis-cluster/redis01     ###redis01...redis06
        ./redis-server ./redis.conf
    4,创建集群
        cd /usr/local/redis-cluster/redis01     ###切换到任意一个redis0X下
        ./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006
                                                ###创建集群,replicas指定为1表示每个主节点有一个从节点
            ...................
            [OK] All nodes agree about slots configuration.
            >>> Check for open slots...
            >>> Check slots coverage...
            [OK] All 16384 slots covered.       ###输出这样的信息，表示集群创建成功。
    5,检查集群状态
    ###连接访问任意redis结点查询集群中的节点情况
    ./redis-cli -c -p 7001                      ###-c表示以集群方式连接redis
        cluster info                            ###查看集群状态
        cluster nodes                           ###查看集群各节点状态,见下
###节点ID                                IP地址    端口     标识                上一次发ping包时间  上一次收到pong包时间 连接状态     节点使用的哈希槽
5ee994e6de9050e6393af28b3abf80b5fff92f29 172.0.0.1:7001 myself,master -         0 0                                      1 connected   0-5460
02183d38a42d44e669154109b1f5d8167b80b17c 172.0.0.1:7003 master -                0 1537513949139                          3 connected   5461-10922
30ac025200c44af5f2e2ccf2821b2f8b48654c2a 172.0.0.1:7005 master -                0 1537513949639                          5 connected   10923-16383
4e0bccb2f683c9c3212f6a6ef352b00c6e101d0a 172.0.0.1:7002 slave 02183d38a42d44e669154109b1f5d8167b80b17c 0 1537513949638   3 connected
3344877b828e3a10215aba2286bf77c79ad823c2 172.0.0.1:7004 slave 5ee994e6de9050e6393af28b3abf80b5fff92f29 0 1537513948638   4 connected
ce3431d9972b7c2178c721ecc84a94bcbb4d454b 172.0.0.1:7006 slave 30ac025200c44af5f2e2ccf2821b2f8b48654c2a 0 1537513949239   6 connected
###这里干掉一个主节点，其从节点自动变成主节点，重启之前干掉的节点，此节点自动加入集群中，并成为当前主节点的从节点
###如果某主从节点都挂掉，集群将不可用，读写命令都执行不了,重启挂掉的某一节点，会自动加入集群中，被当做主节点，集群恢复可用状态。

------------------------------------------------------------------