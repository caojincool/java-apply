ACID-----数据库事务四个基本要素
    原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
    一致性（Consistency）：在事务开始或结束时，数据库应该在一致状态。
    隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。
                         事务将假定只有它自己在操作数据库，彼此不知晓。
    持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响。

CAP-----分布式系统CAP理论:任何分布式系统只可同时满足二点，没法三者兼顾
    Consistency(一致性): 所有的节点上的数据时刻保持同步
    Availability(可用性):每个请求都能接受到一个响应，无论响应成功或失败
    Partition tolerance(分区容错性):系统应该能持续提供服务，即使系统内部有消息丢失（分区）

BASE-----BASE理论是对CAP理论的延伸，核心思想是分布式系统即使无法做到强一致性，可采用适合的方式达到最终一致性。
    基本可用(Basically Available):分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。
                                  电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。
    软状态(Soft State):允许系统存在中间状态，而该中间状态不会影响系统整体可用性。
                       分布式存储中一般一份数据一般会有多份个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。
    最终一致性(Eventual Consistency):系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。

一致性算法
    Paxos算法(发音为帕克索斯),一种基于消息传递的一致性算法,被认为是类似算法中最有效的。
    Raft算法是一种为了管理复制日志的一致性算法。它提供了和Paxos算法相同的功能和性能，
    但是它的算法结构和 Paxos 不同，Raft算法更加容易理解并且更容易构建实际的系统。

分布式事务
    同步方式: 2PC,3PC
    异步方式: 事务性消息队列




