-----------------------------------hystrix隔离--------------------------------
hystrix是处理依赖隔离的框架,hystrix解决依赖隔离如下:
    1:hystrix使用命令模式HystrixCommand(Command)包装依赖调用逻辑，每个命令在单独线程中或同请求线程下信号授权执行。
    2:可配置依赖调用超时时间,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。
    3:为每个依赖提供一个小的线程池（或信号），如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。
    4:依赖调用结果分:成功，失败（抛出异常），超时，线程拒绝，短路。 请求失败(异常，拒绝，超时，短路)时执行fallback(降级)逻辑。
    5:提供熔断器组件,熔断器默认错误率阈值为50%,超过将自动运行。
    6:提供近实时依赖的统计和监控
hystrix隔离方式有两种,采用线程/信号方式,通过隔离限制依赖的并发量和阻塞扩散.
a,线程隔离
    把执行依赖代码的线程与请求线程(如:jetty线程)分离，请求线程可以自由控制离开的时间(异步过程)。
    通过线程池大小可以控制并发量，当线程池饱和时可以提前拒绝服务,防止依赖问题扩散。
    线程隔离的优点:
        线程可以隔离依赖代码,请求线程可以快速放回。
        可以完全模拟异步调用，方便异步编程。
    线程隔离的缺点:
        线程池的主要缺点是它增加了cpu，因为每个命令的执行涉及到排队(默认使用SynchronousQueue避免排队)，调度和上下文切换。
        对使用ThreadLocal等依赖线程状态的代码增加复杂性，需要手动传递和清理线程状态。
b,信号隔离
    信号隔离也可以用于限制并发访问，防止阻塞扩散,
    与线程隔离最大不同在于执行依赖代码的线程依然是请求线程（该线程需要通过信号申请）,
    如果依赖代码是可快速返回的，可以使用信号隔离替换线程隔离,降低开销.
线程隔离与信号隔离的区别可见图hystrix-isolation.png
------------------------------------------------------------------------------