------------------------ThreadPoolExecutor详解---------------------
ThreadPoolExecutor是JDK并发包提供的一个线程池服务。

构造方法
public ThreadPoolExecutor(int corePoolSize,
                          int maximumPoolSize,
                          long keepAliveTime,
                          TimeUnit unit,
                          BlockingQueue<Runnable> workQueue,
                          RejectedExecutionHandler handler) {
    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
         Executors.defaultThreadFactory(), handler);
}
参数解释:
corePoolSize：         核心线程数，会一直存活，即使没有任务，线程池也会维护线程的最少数量
maximumPoolSize：      线程池线程的最大数量
keepAliveTime：        线程池线程所允许的空闲时间，当线程空闲时间达到keepAliveTime，该线程会退出，直到线程数量等于corePoolSize。
                       如果allowCoreThreadTimeout设置为true，则所有线程均会退出直到线程数量为0。
unit：                 线程池线程所允许的空闲时间的单位、可选参数值为：TimeUnit中的几个静态属性：NANOSECONDS、MICROSECONDS、MILLISECONDS、SECONDS。
workQueue：            线程池所使用的缓冲队列，常用的是：java.util.concurrent.ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue
handler：              线程池中线程数大于maximumPoolSize，对任务拒绝的处理策略，默认值ThreadPoolExecutor.AbortPolicy()。

提交任务方法
public void execute(Runnable command) {
    if (command == null)
        throw new NullPointerException();
    if (poolSize >= corePoolSize || !addIfUnderCorePoolSize(command)) {
        if (runState == RUNNING && workQueue.offer(command)) {
            if (runState != RUNNING || poolSize == 0)
                ensureQueuedTaskHandled(command);
        }
        else if (!addIfUnderMaximumPoolSize(command))
            reject(command); // is shutdown or saturated
    }
}

提交任务处理流程:
1.当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。
2.当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行
3.当缓冲队列workQueue已满，且maximumPoolSize>corePoolSize时，新提交任务会创建新线程执行任务
4.当缓冲队列workQueue已满，并且线程池中的数量等于maximumPoolSize，新提交任务由Handler处理
5.当线程池中超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程
6.当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭

RejectedExecutionHandler
ThreadPoolExecutor.AbortPolicy()              当线程池中的数量等于最大线程数时、直接抛出抛出java.util.concurrent.RejectedExecutionException异常
ThreadPoolExecutor.CallerRunsPolicy()         当线程池中的数量等于最大线程数时、重试执行当前的任务，交由调用者线程来执行任务
ThreadPoolExecutor.DiscardOldestPolicy()      当线程池中的数量等于最大线程数时、删除工作队列头部的任务，然后重试执行程序
ThreadPoolExecutor.DiscardPolicy()            当线程池中的数量等于最大线程数时，不做任何动作,放弃任务
-------------------------------------------------------------

