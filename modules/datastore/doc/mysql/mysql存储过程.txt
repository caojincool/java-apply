----------------------mysql存储过程---------------------------------------

创建存储过程(while循环，动态sql)
ep:
CREATE PROCEDURE cat_deal_online_stat()
BEGIN

  declare stat DATE;
  declare cout INT;
  set cout=61;
  set stat='2015-09-30';

  WHILE cout>0 DO

    set @x1=concat("insert into deal_result(stat_date,cat_id,cat_sub_id,cat_third_id ,newup_count,down_count,online_count)",
    "select '",stat,"', cat_id,cat_sub_id,cat_third_id,",
		"sum(if(date(begin_time)='",stat,"',1,0)) as newup_count,",
		"sum(if(date(end_time)='",stat,"',1,0)) as down_count,",
		 "sum(if( date(begin_time)<='",stat,"' and date(end_time)>='",stat,"',1,0)) as online_count ",
		"from tb_deal group by concat(cat_id,cat_sub_id,cat_third_id)");

    prepare sql_create from @x1;
    EXECUTE sql_create;
    DEALLOCATE PREPARE sql_create;

    set cout=cout-1;
    set stat =date_add(stat,INTERVAL -1 DAY);

  END WHILE;

END;

执行存储过程  call cat_deal_online_stat();
-------------------------------------------------------------------
创建存储过程(loop循环)
ep:

create procedure pro1_loop()
begin
    declare i int default 0;
    loop_label: loop
        insert into t1(filed) values(i);
        set i=i+1;
        if i>=5 then
           leave loop_label;
        end if;
    end loop;
end;
使用LOOP编写同样的循环控制语句要比使用while和repeat编写的要复杂一些,
在循环内部加入了IF……END IF语句，在IF语句中又加入了LEAVE语句，LEAVE语句的意思是离开循环，
LEAVE的格式是：LEAVE 循环标号。
-------------------------------------------------------------------
动态sql一般用法

PREPARE stmt FROM @query;
EXECUTE stmt [USING @var];
DEALLOCATE PREPARE stmt;

需要注意
1 prepare不支持 表名做变量! 可以用 contat()函数,组合字符串
2 execute stmt [using @var,@var2] using 必须是@var形式的变量，declare变量不行
3 deallocate prepare stmt; 显式的释放prepare,如果不释放,mysql会自己释放
4 当使用MySQL操作数据库时，IN()方法中不能使用包含预定义变量

ep:

create procedure test_syc()
begin
declare s1 varchar (100) default null;
declare s2 varchar (100) ;
declare v_sql varchar(1000);

set s1='haha';
set s2='note';

set v_sql='insert into deal_result(name,note) values(?,?)';
select v_sql;

set @v_sql=v_sql;
set @s1=s1;
set @s2=s2;

prepare stmt from @v_sql;        -- 必须是用户变量，不能是局部变量
execute stmt using @s1 , @s2;    -- 必须是用户变量，不能是局部变量
deallocate prepare stmt;

end

-------------------------------------------------------------------
查询结果赋值给变量

----方式 1
DECLARE cnt INT DEFAULT 0;
select count(*) into cnt from test_tbl;
select cnt;

----方式 2
set @cnt = (select count(*) from test_tbl);
select @cnt;

----方式 3

select count(*) into @cnt1 from test_tbl;
select @cnt1;

----多个列的情况下似乎只能用into方式

select max(status), avg(status) into @max, @avg from test_tbl;
select @max, @avg;

-------------------------------------------------------------------

带输入，输出参数的存储过程

CREATE PROCEDURE proc_t(out uname varchar(50),out upwd varchar(50),in uid int)
BEGIN
select name,pwd into uname,upwd from bbs where id=uid;
END;

call proc_t(@uname,@upwd,5);
select @uname,@upwd ;

CREATE PROCEDURE simpleproc (OUT param1 INT)
BEGIN
   SELECT COUNT(*) INTO param1 FROM t;
END;

CALL simpleproc(@a);
SELECT @a;

-------------------------------------------------------------------

带if的存储过程

CREATE PROCEDURE test_if()
BEGIN
   set @tt =2;
   if(@tt=1) THEN
     select concat(@tt,"haha");
   elseif(@tt=2) THEN
     select concat(@tt,"gaga");
    ELSE
     select concat(@tt,"tata");
   end if;
END

call test_if();
------------------------------------------------------------------

带游标的存储过程

CREATE PROCEDURE pic_into_pro()
BEGIN
declare  my1 varchar(10) ;
declare  my2 varchar(10) ;
declare  my3  varchar(10) ;
declare  my4  varchar(10) ;
declare  x1 varchar(50);
declare  done  int(10) ;

DECLARE curson1 CURSOR for
select concat('|',t2.id,'|'),c1,left(d1,1),SUBSTR(d1,2) from test t1
join ecs_pictures_type t2  on t1.b1=t2.title limit 5;

-- 游标到底就设置done为1
declare CONTINUE HANDLER for SQLSTATE '02000' set done=1;

set done=0;
open curson1;
repeat
fetch curson1 into my1,my2,my3,my4;

if  not done THEN

set @x1=concat("insert into pictures(`explain`,image_src,is_valid,tag,visits,total_like,`order`,is_view)
select pic_img_title,pic_img_url,1,'",my1,"',0,0,0,0 from pic_list_value
where ",my2,"=1 and ",my3,"=",my4," ;");

prepare sql_create from @x1;
EXECUTE sql_create;
DEALLOCATE PREPARE sql_create;

end if;

until done
end repeat;

close curson1;

END

----------------------------------------------------------

解决存储过程中文乱码问题

CREATE PROCEDURE PROC_FOOBAR(in id int,out rt varchar(100) character set utf8 )
BEGIN
DECLARE code VARCHAR(32) CHARACTER SET utf8;
......
END

---------------------------------------------------------

mysql存储过程或函数中的异常处理

声明
DECLARE handler_type HANDLER FOR condition_value[,...] sp_statement

handler_type:
    EXIT: 发生错误时退出当前代码块（可能是子代码块或者main代码块）
    CONTINUE: 发送错误时继续执行后续代码

condition_value: （SQLSTATE [VALUE] sqlstate_value | condition_name | SQLWARNING | NOT FOUND | SQLEXCEPTION | mysql_error_code ）
    SQLSTATE [VALUE] sqlstate_value    支持标准的 SQLSTATE 定义；
    condition_name    命名条件
    SQLWARNING    是对所有以01开头的SQLSTATE代码的速记
    NOT FOUND    是对所有以02开头的SQLSTATE代码的速记
    SQLEXCEPTION    是对所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的速记
    除了SQLSTATE值，MySQL错误代码也被支持

    优先级:
    MySQL Error code > SQLSTATE code > 命名条件

condition_name（命名条件）
MySQL error code或者SQLSTATE code的可读性太差，所以引入了命名条件，相当于给 MySQL error code或者SQLSTATE code 起了个可以理解的别名。

命名条件声明：
    DECLARE condition_name CONDITION FOR condition_value
    condition_value:   SQLSTATE [VALUE] sqlstate_value | mysql_error_code
ep:
    DECLARE duplicate_key CONDITION FOR 1062;
    DECLARE foreign_key_violated CONDITION FOR 1216;

    DECLARE CONTINUE HANDLER FOR duplicate_key
    BEGIN
        statment;
    END;

    DECLARE CONTINUE HANDLER FOR foreign_key_violated
    BEGIN
        statment;
    END;

    DECLARE CONTINUE HANDLER FOR NOT FOUND  -- 这个不是命名条件，但是很常用
    BEGIN
        statment;
    END;

-------------------------------------------------------------------------------
综合应用：查找在字串str中包含了关键字串中的关键字，并对关键字进行最大关键字刷选，排除关键字中被大关键字包含的小关键字
----结果集转成字符串

CREATE PROCEDURE find_keywords(in str varchar(1000),in keyword_str varchar(1000),out rt varchar(1000))
BEGIN

DECLARE sql_str VARCHAR(10000);


CREATE TABLE if  not EXISTS keyword_tmp(
keyword VARCHAR(20),
flag TINYINT(1) DEFAULT 1 ,
KEY keyword(keyword)
)ENGINE=MyISAM DEFAULT CHARSET=utf8;

TRUNCATE TABLE keyword_tmp;

set @sql_str = CONCAT("INSERT into keyword_tmp(keyword) select '",REPLACE(keyword_str,',',"' union all select '"),"'") ;

prepare stmt from @sql_str;
execute stmt;
deallocate prepare stmt;

update keyword_tmp set flag = 0 where LOCATE(keyword,str)=0 or keyword='';

select group_concat(a.keyword) into rt from keyword_tmp a
where a.flag=1 and not  exists ( select 1 from keyword_tmp b where b.flag=1 and LOCATE(a.keyword,b.keyword)>=1 and  length(b.keyword)>length(a.keyword) )
group by a.flag;

END
----------------------------------------------------------------------
call find_keywords('haba','ha,h,hb,ba',@tt);

select @tt

输出为:ha,ba

------------------------------------------------------------------------