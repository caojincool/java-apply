----------------------------------mysql-b+tree索引------------------------------
mysql中的索引是存储引擎实现的，而不是在服务器层实现的，所以每种存储引擎的索引实现方式可能不同，支持的索引类型也有可能不同。
传统关系型数据库(Oracle/MySQL/PostgreSQL…)，其主要的索引结构，使用的都是b+tree。
mysql InnoDB引擎的表数据，整个都是以b+tree的组织形式存放的。b+tree中的b是balance（平衡树又称平衡多路查找树）的意思。
在b+tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低b+tree的高度。

b-tree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述b-tree，首先定义一条记录为一个二元组[key, data] ，
key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。
b-tree的结构图见(b-tree2.png,此图是一个3阶的b-tree),结构图说明:
每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。
两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。
模拟查找关键字29的过程：
    根据根节点找到磁盘块1，读入内存。#磁盘I/O操作第1次
    比较关键字29在区间（17,35），找到磁盘块1的指针P2。
    根据P2指针找到磁盘块3，读入内存。#磁盘I/O操作第2次
    比较关键字29在区间（26,30），找到磁盘块3的指针P2。
    根据P2指针找到磁盘块8，读入内存。#磁盘I/O操作第3次
    在磁盘块8中的关键字列表中找到关键字29。
分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，
可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个b-tree查找效率的决定因素。
一棵m阶的b-tree有如下特性：
1. 每个节点最多有m个孩子。
2. 除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子。
3. 所有叶子节点都在同一层，且不包含其它关键字信息

b+tree是在b-tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用b+tree实现其索引结构。
从前面b-tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，
如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。
在b+tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，
这样很大的加大每个节点存储的key值数量，降低b+tree的高度。
b+tree的结构图见(b+tree2.png,是一个聚集索引的b+tree图）,通常在b+tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。
因此可以对b+tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。
下面做一个粗略推算：
InnoDB存储引擎中页的大小为16KB，一般表的主键类型为int（占用4个字节）或bigint（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（b+tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值。
也就是说一个深度为3的b+tree索引可以维护10^3 * 10^3 * 10^3 = 10亿条记录。实际情况中每个节点可能不能填充满，因此在数据库中，b+tree的高度一般都在2~4层。
mysql的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I/O操作。
b+tree相对于b-tree有几点不同：
    非叶子节点只存储键值信息。
    上层节点中的记录，存储的是下层节点中的最小值(Low Key)
    所有叶子节点之间都有一个链指针,叶子节点的所有页面，通过双向链表链接起来。
    数据记录都存放在叶子节点中。
b+tree的优点:
1.b+tree内部节点没有存储具体data，所以比b-tree小。把同一节点的data放在同一盘块中，能降低IO读写次数。
2.b+tree查询效率更加稳定，由于任何关键字查找必须走从根节点到叶子节点，效率会稳定。
3.b+tree的叶子节点是链表有序，在做范围查询的时候速度非常快。

------------------------------------------------------------------------------