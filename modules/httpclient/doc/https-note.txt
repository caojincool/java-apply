--------------------------------------https笔记-----------------------------------
http在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，存在的问题如下：
    1,通信使用明文(不加密)，内容可能会被窃听。
    2,不验证通信方的身份，有可能遭遇伪装。
    3,无法证明报文的完整性，所以有可能已遭篡改。
安全的http应该具备的几个特征
    1,服务器认证(客户端知道它们是在与真正的而不是伪造的服务器通话)。
    2,客户端认证(服务器知道它们是在与真正的而不是伪造的客户端通话)。
    3,完整性(客户端和服务器的数据不会被修改)。
    4,加密(客户端和服务器的对话是私密的，无需担心被窃听)。
    5,效率(一个运行的足够快的算法，以便低端的客户端和服务器使用)。
    6,普适性(基本上所有的客户端和服务器都支持这些协议)。
在这样的需求背景下，https技术诞生了。
-------------------------------------------------------
https协议的主要功能基本都依赖于TLS/SSL协议，提供了身份验证、信息加密和完整性校验的功能，可以解决http存在的安全问题。
https加密方式:
     https采用对称加密和非对称加密两者并用的混合加密机制，在交换密钥环节使用非对称加密方式，
    之后的建立通信交换报文阶段则使用对称加密方式。
https身份验证—证明公开密钥正确性的证书
    非对称加密最大的一个问题，就是无法证明公钥本身就是货真价实的公钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，
    如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。
    如果不验证公钥的可靠性，至少会存在如下的两个问题：中间人攻击和信息抵赖。
    为了解决上述问题，可以使用由数字证书认证机构(CA，Certificate Authority)和其相关机关颁发的公开密钥证书。
CA使用具体的流程如下：
    1,服务器的运营人员向数字证书认证机构(CA)提出公开密钥的申请;
    2,CA通过线上、线下等多种手段验证申请者提供信息的真实性，如组织是否存在、企业是否合法，是否拥有域名的所有权等；
    3,如果信息审核通过，CA会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。
    证书包含以下信息：申请者公钥、申请者的组织信息和个人信息、签发机构CA的信息、有效时间、证书序列号等信息的明文，同时包含一个签名；
    签名的产生算法：首先，使用散列函数计算公开的明文信息的信息摘要，然后，采用CA的私钥对信息摘要进行加密，密文即签名；
    申请证书不需要提供私钥，确保私钥永远只能被服务器掌握；证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名；
    内置CA对应的证书称为根证书；颁发者和使用者相同，自己为自己签名，叫自签名证书;证书=公钥+申请者与颁发者信息+签名；
https协议历史
    1,SSL协议的第一个版本由Netscape公司开发，但这个版本从未发布过；
    2,SSL协议第二版于1994年11月发布。第一次部署是在Netscape；
    3,SSL 3于1995年年底发布，虽然名称与早先的协议版本相同，但SSL3是完全重新设计的协议，该设计一直沿用到今天。
    4,TLS 1.0于1999年1月问世，与SSL 3相比，版本修改并不大；
    5,2006年4月，下一个版本TLS 1.1才问世，仅仅修复了一些关键的安全问题；
    6,2008年8月，TLS1.2发布。该版本添加了对已验证加密的支持，并且基本上删除了协议说明中所有硬编码的安全基元，使协议完全弹性化；
https协议原理
    宏观上，TLS以记录协议(record protocol)实现。
    记录协议负责在传输连接上交换所有的底层消息，并可以配置加密。每一条TLS记录以一个短标头起始。
    标头包含记录内容的类型(或子协议)、协议版本和长度。消息数据紧跟在标头之后。
    TLS的主规格说明书定义了四个核心子协议：
        握手协议(handshake protocol)；
        密钥规格变更协议(change cipher spec protocol)；
        应用数据协议(application data protocol)；
        警报协议(alert protocol)；
    握手协议
        握手是TLS协议中最精密复杂的部分。在这个过程中，通信双方协商连接参数，并且完成身份验证。
        根据使用的功能的不同，整个过程通常需要交换6~10条消息。根据配置和支持的协议扩展的不同，交换过程可能有许多变种。
        在使用中经常可以观察到以下三种流程：
            1,完整的握手，对服务器进行身份验证(单向验证，最常见)；
            2,对客户端和服务器都进行身份验证的握手(双向验证)；
            3,恢复之前的会话采用的简短握手；
        单向验证的握手流程,一次完整的流程主要分为四个步骤
            1,交换各自支持的功能，对需要的连接参数达成一致;
            2,验证出示的证书，或使用其他方式进行身份验证;
            3,对将用于保护会话的共享主密钥达成一致;
            4,验证握手消息是否被第三方团体修改;
    应用数据协议携带着应用消息，只以TLS的角度考虑的话，这些就是数据缓冲区。记录层使用当前连接安全参数对这些消息进行打包、碎片整理和加密。
--------------------------------------------------
自制https证书方式1
###证书颁发机构
1,生成CA机构私钥
    openssl genrsa -out ca.key 2048
2,生成CA证书
    openssl req -x509 -new -key ca.key -out ca.crt
###服务端
1,生成服务端私钥
    openssl genrsa -out server.key 2048
2,生成服务端证书请求文件
    openssl req -new -key server.key -out server.csr
3,使用CA证书生成服务端证书
    openssl x509 -req -sha256 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 -out server.crt
    注:关于sha256，默认使用的是sha1，在新版本的chrome中会被认为是不安全的，因为使用了过时的加密算法。
4,打包服务端的资料为pkcs12格式(非必要，只是换一种格式存储上一步生成的证书)
    openssl pkcs12 -export -in server.crt -inkey server.key -out server.pkcs12
    生成过程中，需创建访问密码，需记录下来。
5,生成服务端的keystore（.jks文件, 非必要，Java程序通常使用该格式的证书）
    keytool -importkeystore -srckeystore server.pkcs12 -destkeystore server.jks -srcstoretype pkcs12
6,把ca证书放到keystore中（非必要）
    keytool -importcert -keystore server.jks -file ca.crt
###客户端
1,导入根证书ca.crt到浏览器受信任的根证书颁发机构列表中
###nginx配置https
server {
    listen      127.0.0.1:443 ssl;
    ssl on;
    ssl_certificate server.crt;
    ssl_certificate_key server.key;
    ...
}
注:crt、jks、pkcs12都是用来保存证书的不同格式，不同的服务器软件可能会使用不同格式的证书文件。
OpenSSl、Keytool都是可以用来生成Https证书的工具软件，其中OpenSSl功能更多更复杂，Keytool随JDK安装而安装。
证书的格式是多样的，生成证书的软件工具有很多，不同服务器程序的配置方法不尽相同，要达成目的有很多种方法。
----------------------------------------------------------------------------------
自制https证书方式2(此方式经测试可行):

openssl genrsa -des3 -out yaya.key 1024
openssl req -new -key yaya.key -out yaya.csr
    Country Name (2 letter code) [XX]:cn                                                         #国家
    State or Province Name (full name) []:sichuan                                                #省份
    Locality Name (eg, city) [Default City]:chengdu                                              #地区名字
    Organization Name (eg, company) [Default Company Ltd]:ccc                                    #公司名
    Organizational Unit Name (eg, section) []:it                                                 #部门
    Common Name (eg, your name or your server's hostname) []:cheng                               #CA主机名
    Email Address []:cheng@ccc.cn                                                                #邮箱

cp yaya.key yaya.key.bak
openssl rsa -in yaya.key.bak -out abab.key
openssl x509 -req -days 365 -in yaya.csr -signkey abab.key -out yaya.crt

vim nginx.conf
     server {
       listen       80;
       server_name  localhost;
       rewrite ^(.*)$  https://$host$1 permanent;
       #http访问自动跳转到https
     }
     server {
       listen 443;
       server_name localhost;
       ssl on;

       ### SSL cert files ###
       ssl_certificate     yaya.crt;
       #由于此证书是自己手动颁发的，是不受信任的，访问时会有个“大叉”提示，但不影响访问
       ssl_certificate_key abab.key;
       ssl_session_timeout 5m;
     }
----------------------------------------------------------------------------------