Vue专注于 MVVM 模型的 ViewModel 层。它通过双向数据绑定把 View 层和 Model 层连接了起来。
实际的 DOM 封装和输出格式都被抽象为了Directives 和 Filters。
优点：
    简单：官方文档很清晰，比 Angular 简单易学。
    快速：异步批处理方式更新 DOM。
    组合：用解耦的、可复用的组件组合你的应用程序。
    紧凑：~18kb min+gzip，且无依赖。
    强大：表达式 & 无需声明依赖的可推导属性 (computed properties)。
    对模块友好：可以通过 NPM、Bower 或 Duo 安装，不强迫你所有的代码都遵循 Angular 的各种规定，使用场景更加灵活。
缺点：
    不支持IE8：不过AngularJS 1.3也抛弃了对IE8的支持。

AngularJS是完全使用JavaScript编写的客户端技术。同其他历史悠久的Web技术（HTML、CSS和JavaScript）配合使用，使Web应用开发比以往更简单、更快捷。
优点：
    模板功能强大丰富，自带了极其丰富的angular指令。
　　是一个比较完善的前端框架，包含服务，模板，数据双向绑定，模块化，路由，过滤器，依赖注入等所有功能；
　　自定义指令，自定义指令后可以在项目中多次使用。
缺点：
    大而全：学习起来有难度，比较难理解一些。
    推翻重写：AngularJS2.0和1.0相比，把之前的推翻重写，框架的改变很大，基本是两个框架。

React主要用于构建UI。可以在React里传递多种类型的参数，如声明代码，帮助渲染出UI、也可以是静态的HTML DOM元素、
也可以传递动态变量、甚至是可交互的应用组件。
React特性：　
    声明式设计：React采用声明范式，可以轻松描述应用。
    高效：React通过对DOM的模拟，最大限度地减少与DOM的交互。
    灵活：React可以与已知的库或框架很好地配合。
优点：
    React速度很快：它并不直接对DOM进行操作，引入了一个叫做虚拟DOM的概念，安插在javascript逻辑和实际的DOM之间，性能好。
    跨浏览器兼容：虚拟DOM帮助我们解决了跨浏览器问题，它为我们提供了标准化的API，甚至在IE8中都是没问题的。
    模块化:一切都是component：代码更加模块化，重用代码更容易，可维护性高。
    单向数据流：Flux是一个用于在JavaScript应用中创建单向数据层的架构，它随着React视图库的开发而被Facebook概念化。
    同构、纯粹的javascript：因为搜索引擎的爬虫程序依赖的是服务端响应而不是JavaScript的执行，预渲染你的应用有助于搜索引擎优化。
    兼容性好：比如使用RequireJS来加载和打包，而Browserify和Webpack适用于构建大型应用。
缺点：
    React本身只是一个V而已，并不是一个完整的框架，所以如果是大型项目想要一套完整的框架的话，基本都需要加上ReactRouter和Flux才能写大型应用。
