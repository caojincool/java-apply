-------------------------------------前端技术演进---------------------------------
1989年,超文本标记语言（HyperText Markup Language），简称HTML问世，并在1993年成为互联网草案。
最早的HTML页面是完全静态的网页，它们是预先编写好的存放在Web服务器上的html文件。
浏览器请求某个URL时，Web服务器把对应的html文件扔给浏览器，就可以显示html文件的内容了。
如果要针对不同的用户显示不同的页面，不可能给各个用户准备各不同的html文件，所以，服务器就需要针对不同的用户，动态生成不同的html文件。
一个实现方式就是利用C、C++这些编程语言，直接向浏览器输出拼接后的字符串。这种技术被称为CGI：Common Gateway Interface。
显然，一些门户网站首页这样的复杂的HTML是不可能通过拼字符串得到的。使用中发现，其实拼字符串的时候，大多数字符串都是HTML片段，是不变的，
变化的只有少数和用户相关的数据，所以，又出现了新的创建动态HTML的方式：ASP、JSP和PHP——分别由微软、SUN和开源社区开发。
1995年年底，JavaScript被引入到浏览器。浏览器可以自己修改HTML页面的内容。
有了JavaScript后，浏览器就可以运行JavaScript，然后，对页面进行一些修改。
JavaScript还可以通过修改HTML的DOM结构和CSS来实现一些动画效果，而这些功能没法通过服务器完成，必须在浏览器实现。
用JavaScript在浏览器中操作HTML，大致有几个阶段:
第一阶段，直接用JavaScript操作DOM节点，使用浏览器提供的原生API。
第二阶段，由于原生API不好用，还要考虑浏览器兼容性，jQuery于2006年8月横空出世，以简洁的API迅速俘获了前端开发者的芳心。
第三阶段，js不满足与只做前端开发，2009年5月,nodejs这个基于Chrome V8引擎的JavaScript运行环境产生，它让JavaScript 可运行在服务端。
基于node的MVVM模式，在前端页面中，把Model用纯JavaScript对象表示，View负责显示，两者做到了最大限度的分离。
把Model和View关联起来的就是ViewModel。ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。

一个MVVM框架和jQuery操作DOM的区别
case1:用jQuery修改name和age节点的内容
var name = 'cc';
var age = 33;

$('#name').text(name);
$('#age').text(age);

case2:用mvvm修改name和age节点的内容
var person = {
    name: 'aa',
    age: 11
};
......
person.name = 'cc';
person.age = 33;
MVVM并不关心DOM的结构，而是关心数据如何存储。最简单的数据存储方式是使用JavaScript对象
上面的case2把变量person看作Model，把HTML某些DOM节点看作View，并假定它们之间被关联起来了
把显示的name从aa改为cc，age从11改为33，并不操作DOM，而是直接修改JavaScript对象person。
使用MVVM,改变JavaScript对象的状态，会导致DOM结构作出对应的变化。
这让前端开发的关注点从如何操作DOM变成了如何更新JavaScript对象的状态，操作JavaScript对象比DOM简单多了。
这就是MVVM的设计思想：关注Model的变化，让MVVM框架去自动更新DOM的状态，从而把前端开发从操作DOM的繁琐步骤中解脱出来。
Virtual DOM（虚拟DOM），就是对真实DOM节点的描述，通过改变Virtual DOM来以最小变动来改变真实DOM。
目前React 、Vue 、Angular框架，都是属于MV*框架的范畴，其设计特点，主要是以数据为核心。
----------------------------------------------------------------------------------