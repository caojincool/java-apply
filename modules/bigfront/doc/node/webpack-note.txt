webpack是前端的打包工具。它是模块化构建机制，分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），
并将其打包为合适的格式以供浏览器使用，类似于 Grunt and Gulp，但是有区别。Gulp/Grunt是一种能够优化前端的开发流程的工具，
而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。
Webpack的工作方式是：把项目当做一个整体，通过一个给定的主文件（如：index.js），从这个文件开始找到项目的所有依赖文件，
使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。
webpack中文网站地址:https://www.webpackjs.com/

npm install -g webpack webpack-cli                 ###安装webpack和webpack-cli
webpack  {entry file}                              ###通过webpack打包

webpack打包的项目可定义一个配置文件webpack.config.js，可以把所有的与打包相关的信息放在里面。比如:
module.exports = {
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",//打包后的文件存放的地方
    filename: "bundle.js"//打包后输出文件的文件名
  }
}
###__dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录。
有了此配置后，再打包文件，只需运行webpack就可以，它会自动引用webpack.config.js文件中的配置选项。

webpack可生成Source Maps（使调试更容易）
通过打包后的文件，不容易找到出错了的地方，对应的代码的位置的，Source Maps就可帮助解决这个问题。
通过简单的配置，webpack就可以在打包时生成的source maps，
提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。
在webpack的配置文件中配置source maps，需要配置devtool，比如:
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  }
}

devtool选项 	                         配置结果
source-map 	                             在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；
cheap-module-source-map 	             在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，
                                         但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；
eval-source-map 	                     使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。在不影响构建速度的前提下生成完整的sourcemap，
                                         但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；
cheap-module-eval-source-map 	         这是在打包文件时最快的生成source map的方法，
                                         生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；

webpack提供一个可选的本地服务器,它能让浏览器监听代码的修改，并自动刷新显示修改后的结果
实现此功能，在webpack中进行配置之前需要单独安装它作为项目依赖
npm install --save-dev webpack-dev-server
使用本地服务器webpack配置文件中的devserver的配置选项值，比如:
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  }
}
在package.json中的scripts对象中添加如下命令，用以开启本地服务器
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack",
    "server": "webpack-dev-server --open"
  },
在终端中输入npm run server即可在本地的8080端口查看结果。

webpack把所有的文件都当做模块处理，js代码，css和fonts以及图片等等通过合适的loader都可以被处理。

webpack的插件可拓展webpack功能,webpack有很多内置插件，同时也有很多第三方插件。
使用某个插件，需要通过npm安装它，然后在webpack配置中的plugins节点添加该插件的一个实例。
HtmlWebpackPlugin插件--依据一个简单的index.html模板，生成一个自动引用打包后的js文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）
npm install --save-dev html-webpack-plugin      ###安装html-webpack-plugin插件
在webpack的配置文件中配置插件，比如:
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  }，
  plugins: [
      new webpack.BannerPlugin('版权所有，翻版必究'),
      new HtmlWebpackPlugin({
          template: __dirname + "/app/index.tmpl.html"
      })
  ]
}