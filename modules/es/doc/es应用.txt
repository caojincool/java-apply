-----------------------------es应用-----------------------------------
es索引的版本控制
es索引文档的版本控制是通过文档中的_version字段来控制的，类似乐观锁那样的版本控制
GET book/book/1
返回:
{
  "_index": "book",                              ------索引名
  "_type": "book",                               ------类型名
  "_id": "1",                                    ------文档id
  "_version": 1,                                 ------版本
  "found": true,
  "_source": {
    "id":1,
    "title": "solr搜索引擎",                     ------文档内容
    "content":"solr是基于lucene开发的一款搜索引擎项目"
  }
}
PUT /book/book/1?version=1                       ------指定version更新文档,如果当前文档版本不等于1，更新会失败，
                                                       当前版本等于1，更新会成功，同时版本号会递增1。
{
  "id":1,
  "title": "solr搜索引擎v2",
  "content":"solr是基于lucene开发的一款搜索引擎项目"
}
返回:
{
  "_index": "book",
  "_type": "book",
  "_id": "1",
  "_version": 2,                                 ---版本号已修改
  "result": "updated",
  "_shards": {
    "total": 2,
    "successful": 2,
    "failed": 0
  }
}
也可以通过外部系统使用版本控制,一个常见情况是使用数据库作为主要的数据存储，使用es做数据检索，
这意味着数据库的所有更改发生时都需要同步到es,es中通过增加 version_type=external 方式指定外部版本号，
如果外部版本号大于当前文档版本，则可以执行更新操作。
例如：更新一个新的具有外部版本号 5的书
PUT /book/book/3?version=5&version_type=external
{
  "id":5,
  "title":"solr搜索引擎",
  "content":"solr是基于lucene开发的一款搜索引擎项目"
}
返回
{
  "_index": "book",
  "_type": "book",
  "_id": "3",
  "_version": 5,
  "result": "created",
  ...
}
重复执行上面的PUT更新文档，就会报错,因为外部版本号不大于当前版本号5。
{
  "error": {
    "type": "version_conflict_engine_exception",
    "reason": "[blog][2]: version conflict, current version [5] is higher or equal to the one provided [5]",
    "index": "book"
  },
  "status": 409
}
--------------------------------
es索引的批量操作
es针对海量数据的批量操作,提供了Bulk API，可以执行批量索引、批量删除、批量更新等操作，
也就是说Bulk API允许使用在单个步骤中进行多次 create 、 index 、 update 或 delete 请求。
bulk请求体格式如下所示：
{ action: { metadata }}\n
{ request body        }\n
{ action: { metadata }}\n
{ request body        }\n
...
此格式类似一个有效的单行 JSON 文档，它通过换行符(\n)连接到一起。
每行一定要以换行符(\n)结尾， 包括最后一行。这些换行符被用作一个标记，可以有效分隔行。
action/metadata 行指定某个文档做什么操作。metadata指定被索引、创建、更新或者删除的文档的_index、_type和 _id 。
request body 行由文档的_source本身组成–文档包含的字段和值。它是index和create操作所必需的。
例如:
POST /_bulk
{ "delete": { "_index": "book", "_type": "book", "_id": "10" }}
{ "create": { "_index": "book", "_type": "book", "_id": "11" }}
{ "title":    "book11" }
{ "index":  { "_index": "book", "_type": "book" }}
{ "title":    "book_random" }
{ "update": { "_index": "book", "_type": "book", "_id": "11", "_retry_on_conflict" : 2} }
{ "doc" : {"title" : "book11v2"} }
响应中包含items 数组，数组的内容是以请求的顺序列出来的每个请求的结果。
-----------------------------------------------
es不停服务修改mapping
es索引是不可改变的segments，每一个segmeng都是一个小的倒排索引。segment是永远不会更新的。
更新一个document只是创建了一个新的document，并且在原来的document上加了删除标记。当添加新的document或者更新document的时候，
新的segment就会创建。后台运行merge进程，会不停的把一些小的segment合并成一个大的segment，同时会把打有删除标记的document彻底清理。
通常情况下，一个index拥有很多type，每一个type都有不同的shema和mapping。一个segment可能包括多个type的document。
所以，如果想修改一个type的一个field的定义，都需要重建所有索引。

segment中只是包含了这个segment中存在的document中的包含的field的数据信息。
因此增加一个新的field是不需重建索引的，只需要put_mapping即可，无需重建索引。


es不停服务重建索引是利用alias机制来实现的，alias机制使得重建索引完全在后台执行，而且使得索引切换对应用程序来说是透明的。
一个alias相当于一个软链接，可以指向一个或者多个索引。
创建索引
curl -XPUT localhost:9200/my_index_v1 -d '
{... mappings ...}
创建alias指向这个索引
curl -XPOST localhost:9200/_aliases -d '
{
    "actions": [
        { "add": {
            "alias": "my_index",
            "index": "my_index_v1"
        }}
    ]
}
现在应用程序对my_index进行操作，就相当于对my_index_v1进行操作。
需要重建索引时，可以新建一个索引
curl -XPUT localhost:9200/my_index_v2 -d '
{ ... mappings ... }
然后利用v1的数据来填充v2，将alias指向v2即可。
curl -XPOST localhost:9200/_aliases -d '
{
    "actions": [
        { "remove": {
            "alias": "my_index",
            "index": "my_index_v1"
        }},
        { "add": {
            "alias": "my_index",
            "index": "my_index_v2"
        }}
    ]
}
最后，删除v1
curl -XDELETE localhost:9200/my_index_v1
现在在后台完成了重建索引的操作，而无需停止服务，对应用程序来说这个过程是完全透明的。

MultiField允许同一个字段用在不同的场景下。一点典型应用就是对同一个字段title以两种不同的方式索引：
一个analyzed的string作为查询时使用，一个not_analyzed字段作为排序使用。任何一个纯字段（object和nested不属于这一类）可以升级为一个multi-field，而无需重建索引。
比如，现在有一个string类型的字段：
{
    "created": { "type": "string"}
}
可以升级为一个multifield，添加一个sub-field是date类型
curl -XPUT localhost:9200/my_index/my_type/_mapping -d '
{
    "my_type": {
        "properties": {
            "created": {
                "type":   "multi_field",
                "fields": {
                    "created": { "type": "string" },
                    "date":    { "type": "date"   }
                }
            }
        }
    }
}
前边的created的字段仍然存在，作为multi-field的主字段，可以用created或者created.created访问，
而新的date类型的字段，可以用created.date来访问，注意，这个字段只对新添加的document有效。

----------------------------------------------------------------------------