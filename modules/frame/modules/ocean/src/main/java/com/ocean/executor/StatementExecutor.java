package com.ocean.executor;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * 静态语句对象请求的执行器
 */
public class StatementExecutor {

    private Collection<StatementEntity> statements = new ArrayList<StatementEntity>();

    /**
     * 添加静态语句对象至执行上下文
     */
    public void addStatement(final String sql, final Statement statement) {
        statements.add(new StatementEntity(sql, statement));
    }

    /**
     * 执行SQL查询
     */
    public List<ResultSet> executeQuery() throws SQLException {
        List<ResultSet> result;
        if (1 == statements.size()) {
            StatementEntity entity = statements.iterator().next();
            result = Arrays.asList(entity.statement.executeQuery(entity.sql));
            return result;
        }
        result = ExecutorEngine.execute(statements, new ExecuteUnit<StatementEntity, ResultSet>() {

            @Override
            public ResultSet execute(final StatementEntity input) throws Exception {
                return input.statement.executeQuery(input.sql);
            }
        });
        return result;
    }

    /**
     * 执行SQL更新
     */
    public int executeUpdate() throws SQLException {
        return executeUpdate(new Updater() {

            @Override
            public int executeUpdate(final Statement statement, final String sql) throws SQLException {
                return statement.executeUpdate(sql);
            }
        });
    }

    public int executeUpdate(final int autoGeneratedKeys) throws SQLException {
        return executeUpdate(new Updater() {

            @Override
            public int executeUpdate(final Statement statement, final String sql) throws SQLException {
                return statement.executeUpdate(sql, autoGeneratedKeys);
            }
        });
    }

    public int executeUpdate(final int[] columnIndexes) throws SQLException {
        return executeUpdate(new Updater() {

            @Override
            public int executeUpdate(final Statement statement, final String sql) throws SQLException {
                return statement.executeUpdate(sql, columnIndexes);
            }
        });
    }

    public int executeUpdate(final String[] columnNames) throws SQLException {
        return executeUpdate(new Updater() {

            @Override
            public int executeUpdate(final Statement statement, final String sql) throws SQLException {
                return statement.executeUpdate(sql, columnNames);
            }
        });
    }

    private int executeUpdate(final Updater updater) throws SQLException {
        int result;
        if (1 == statements.size()) {
            StatementEntity entity = statements.iterator().next();
            result = updater.executeUpdate(entity.statement, entity.sql);
            return result;
        }
        result = ExecutorEngine.execute(statements, new ExecuteUnit<StatementEntity, Integer>() {

            @Override
            public Integer execute(final StatementEntity input) throws Exception {
                return updater.executeUpdate(input.statement, input.sql);
            }
        }, new MergeUnit<Integer, Integer>() {

            public Integer merge(final List<Integer> results) {
                int result = 0;
                for (int each : results) {
                    result += each;
                }
                return result;
            }
        });
        return result;
    }

    /**
     * 执行SQL请求
     */
    public boolean execute() throws SQLException {
        return execute(new Executor() {
            public boolean execute(final Statement statement, final String sql) throws SQLException {
                return statement.execute(sql);
            }
        });
    }

    public boolean execute(final int autoGeneratedKeys) throws SQLException {
        return execute(new Executor() {

            @Override
            public boolean execute(final Statement statement, final String sql) throws SQLException {
                return statement.execute(sql, autoGeneratedKeys);
            }
        });
    }

    public boolean execute(final int[] columnIndexes) throws SQLException {
        return execute(new Executor() {
            public boolean execute(final Statement statement, final String sql) throws SQLException {
                return statement.execute(sql, columnIndexes);
            }
        });
    }

    public boolean execute(final String[] columnNames) throws SQLException {
        return execute(new Executor() {
            public boolean execute(final Statement statement, final String sql) throws SQLException {
                return statement.execute(sql, columnNames);
            }
        });
    }

    private boolean execute(final Executor executor) throws SQLException {
        if (1 == statements.size()) {
            StatementEntity entity = statements.iterator().next();
            boolean result = executor.execute(entity.statement, entity.sql);
            return result;
        }
        List<Boolean> result = ExecutorEngine.execute(statements, new ExecuteUnit<StatementEntity, Boolean>() {

            @Override
            public Boolean execute(final StatementEntity input) throws Exception {
                return executor.execute(input.statement, input.sql);
            }
        });
        return result.get(0);
    }

    private interface Updater {

        int executeUpdate(Statement statement, String sql) throws SQLException;
    }

    private interface Executor {

        boolean execute(Statement statement, String sql) throws SQLException;
    }

    private class StatementEntity {

        private String sql;

        private Statement statement;

        public StatementEntity( String sql,Statement statement)
        {
            this.sql=sql;
            this.statement=statement;
        }
    }
}
